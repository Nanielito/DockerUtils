swagger: '2.0'


info:
  version: '1.0.0'
  title: 'Tickets API'
  description: 'Module to manage tickets'
  termsOfService: 'https://smartu.smartmatic.net/display/ESS/RESTful+API+Designing+guidelines'
  contact:
    name: 'SMTT API team'
    email: 'mbotto@smartmatic.com'
    url: 'https://smartu.smartmatic.net/display/ESS'
  license:
    name: 'MIT -- To be defined.'
    url: 'http://opensource.org/licenses/MIT'

host: '10.4.54.201'
basePath: '/emp/api/'

schemes:
  - 'https'
consumes:
  - 'application/json'
produces:
  - 'application/json'
  
paths:
  ################################################### TICKETS
  /v1/Tickets:
    ################################  GET
    get:
      summary: Gets the ticket list
      description: Gets ticket list
      operationId: getTickets
      produces:
        - application/json
      tags:
        - Ticket
      parameters:
        - in: query
          name: offset
          description: 'The number of items to skip before starting to collect the result set'
          type: integer
          format: int64
          
        - in: query
          name: limit
          description: 'The numbers of items to return'
          type: integer
          format: int64
      responses:
        200:
          description: The ticket list was retrieved successfully
          schema:
            $ref: '#/definitions/TicketsGetSucces200'
    ################################  POST
    post:
      summary: Create a new ticket
      description: Create a new ticket
      operationId: createTicket
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Ticket
        - Ticket - CRUD
      parameters:
        - in: body
          name: ticket
          description: Ticket object which needs to be created
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        201:
          description: The Ticket was created succesfully and returns the actual ticket
          schema:
            $ref: '#/definitions/TicketsCreateSucces201'
        400:
          description: 'Bad Request Error'
          schema:
            $ref: '#/definitions/TicketErrorModel400'
    
  /v1/Tickets/{code}:
    get:
      summary: Gets a ticket
      description: Gets a ticket
      operationId: getTicket
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Ticket
        - Ticket - CRUD
      parameters:
        - in: path
          name: code
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'The ticker was retrieved successfully'
          schema:
            $ref: '#/definitions/Ticket'
        #400:
        #  description: 'Bad Request Error'
        #  schema:
        #    $ref: '#/definitions/EventErrorModel400'
        #404:
        #  description: 'Not Found'
        #  schema:
        #    $ref: '#/definitions/EventErrorModel404'
    ################################  PUT
    put:
      summary: Updates a ticket
      description: Updates a ticket
      operationId: updateTicket
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Ticket
        - Ticket - CRUD
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
        - in: body
          name: ticket
          description: 'Ticket object which needs to be updated'
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request Error'
          schema:
            $ref: '#/definitions/TicketErrorModel400'
    delete:
      summary: Delete a ticket
      description: Delete a ticket
      operationId: deleteTicket
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Ticket
        - Ticket - CRUD
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'OK'

  /v1/Tickets/{code}/registerOperator:
    get:
      summary: Get the register operator of ticket
      description: Get the register operator of ticket
      tags:
        - Ticket - INFO 
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
  
  /v1/Tickets/{code}/relatedOperator:
    get:
      summary: Get the related operator to the ticket
      description: Get the related operator to the ticket
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
  
  /v1/Tickets/{code}/relatedSite:
    get:
      summary: Get the register site of ticket
      description: Get the register site of ticket
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Site'
            
  /v1/Tickets/{code}/relatedElement:
    get:
      summary: Get the related element of ticket
      description: Get the related element of ticket
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Element'

  /v1/Tickets/{code}/issue:
    get:
      summary: Get the issue of the ticket
      description: Get the issue of the ticket
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Issue'
  
  /v1/Tickets/{code}/solutions:
    get:
      summary: Get the solution ticket list
      description: Get the solution ticket list
      operationId: getTicketSolutions
      produces:
        - application/json
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
          
        - in: query
          name: offset
          description: 'The number of items to skip before starting to collect the result set'
          type: integer
          format: int64
          
        - in: query
          name: limit
          description: 'The numbers of items to return'
          type: integer
          format: int64
      responses:
        200:
          description: The ticket list was retrieved successfully
          schema:
            $ref: '#/definitions/TicketsGetSolutionsSucces200'
  
  /v1/Tickets/{code}/stage:
    get:
      summary: Get the actual stage of ticket
      description: Get the actual stage of ticket
      tags:
        - Ticket - INFO
      parameters:
        - name: code
          in: path
          description: 'The ticket code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Stage'
  
  /v1/Comments:
    get:
      summary: Get the comment list referred to a ticket
      description: Get the comment list
      operationId: getComments
      produces:
        - application/json
      tags:
        - Comment
      parameters:
        - in: query
          name: offset
          description: 'The number of items to skip before starting to collect the result set'
          type: integer
          format: int64
          
        - in: query
          name: limit
          description: 'The numbers of items to return'
          type: integer
          format: int64
          
        - in: query
          name: ticketCode
          description: The ticket code of 
          type: string
      responses:
        200:
          description: OK
    ################################  POST
    post:
      summary: Create a new comment
      description: Create a new comment
      operationId: createComment
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Comment
        - Comment - CRUD
      parameters:
        - in: body
          name: comment
          description: Comment object which needs to be created
          required: true
          schema:
            $ref: '#/definitions/Comments'
      responses:
        201:
          description: The Ticket was created succesfully and returns the actual ticket
          schema:
            $ref: '#/definitions/CommentCreateSucces201'

  /v1/Comments/{code}:
    get:
      summary: Get the comment
      description: Get the comment
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Comment
        - Comment - CRUD
      parameters:
        - in: path
          name: code
          description: 'The comment code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CommentCreateSucces201'
    delete:
      summary: Delete the comment
      description: Delete the comment
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - Comment
        - Comment - CRUD
      parameters:
        - in: path
          name: code
          description: 'The comment code'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
    
#########################################################################################################
 
definitions:
  
  ##############################################################################
  ############### OBJECTS DEFINITIONS
  Ticket:
    type: object
    required: 
      - registerOperatorCode
      - createDate
    properties:
      code:
        type: integer
        format: int64
        example: 1
      registerOperatorCode:
        type: integer
        format: int64
        example: 1
      relatedOperatorCode:
        type: integer
        format: int64
        example: 1
      relatedSiteCode:
        type: integer
        format: int64
        example: 1
      relatedElementCode:
        type: integer
        format: int64
        example: 1
      issueCode:
        type: integer
        format: int64
        example: 1
      solutions:
        type: "array"
        items:
          type: integer
          format: int64
          example: 1
      coments:
        type: "array"
        items:
          type: integer
          format: int64
          example: 1
      createDate:
        type: string
        format: date-time
      lastUpdate:
        type: string
        format: date-time
      closeDate:
        type: string
        format: date-time
      stageCode:
        type: integer
        format: int64
        example: 1
      closeStatus:
        type: string
        example: 'DONE'
      _links:
        type: 'object'
        required:
          - 'self'
        properties:
          self:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Tickets/1'
          registerOperator:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Users/1'
          registerSite:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Sites/1'
          relatedOperator:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/User/1'
          relatedSite:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Site/1'
          relatedElement:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Elements/1'
          issue:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                example: 'https://localhost/vvsg/api/v1/Issues/1'
          solution:
            type: object
            required:
              - template
            properties:
              template:
                type: string
                example: 'https://localhost/vvsg/api/v1/Solutions/{solutionCode}'
          comment:
            type: object
            required:
              - template
            properties:
              template:
                type: string
                example: 'https://localhost/vvsg/api/v1/Comments/{commentCode}'
          stage:
            type: object
            required:
              - template
            properties:
              template:
                type: string
                example: 'https://localhost/vvsg/api/v1/Stage/{stageCode}'
  
  Comments:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 1
      ticketCode:
        type: integer
        format: int64
        example: 1
      date:
        type: string
        format: date-time
      coment:
        type: string
        example: "Example of comment"
      author:
        $ref: '#/definitions/User'

  IssueType:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 1
      customCode:
        type: string
        example: Voting Machine
        
  Issue:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 1
      customCode:
        type: string
        example: '0x0001'
      issueType:
        $ref: '#/definitions/IssueType'
      name:
        type: string
        example: Pantalla rota
        
  Solution:
    type: object
    properties:
      code:
        type: integer
        format: int64
      name:
        type: string
        example: Fix Problem
      description:
        type: string
        example: A long description of how to resolve a problem
  
  ResolutionEntity:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 1
      customCode:
        type: string
        example: SMTT
      name:
        type: string
        example: Smartmatic
  
  User:
    type: object
    xml:
      name: user
  
  Stage:
    type: object
    xml:
      name: stage
  
  Operator:
    type: object
    properties:
      code:
        type: integer
        format: int64
        example: 1
  
  Site:
    type: object
    xml:
      name: site
  
  Element:
    type: object
    xml:
      name: Element
      
  ############### /OBJECTS DEFINITIONS 
  ##############################################################################
  
  ##############################################################################
  ############### RESPONSE DEFINITIONS 
  
  TicketsGetSucces200:
    type: array
    items:
      $ref: '#/definitions/Ticket'
    
  TicketsCreateSucces201:
    type: array
    items:
      $ref: '#/definitions/Ticket'
  
  TicketsCreateError400:
    type: array
    items:
      $ref: '#/definitions/Ticket'
  
  TicketErrorModel400:
    type: object
    required:
      - userMessage
      - errorCode
    properties:
      developerMessage:
        type: string
        example: 'java.lang.NumberFormatException: For input string: A'
      userMessage:
        type: string
        example: 'The parameter [A] is invalid for a ticket'
      errorCode:
        type: string
        example: 'VVSG-PS-10'
      moreInfo:
        type: string
        example: 'http://smartu.smartmatic.net/vvsg/ticket/valid_codes.html'
        
  TicketsGetRegisterOperator:
    type: array
    items:
      $ref: '#/definitions/Ticket'
  
  TicketsGetSolutionsSucces200:
    type: array
    items:
      $ref: '#/definitions/Solution'
      
  CommentCreateSucces201:
    type: array
    items:
      $ref: '#/definitions/Comments'
      
  
  ############### /RESPONSE DEFINITIONS 
  ##############################################################################
  
################################################################################
  CallerType:
    type: 'object'
    xml:
      name: 'CallerType'
      
  Caller:
    type: 'object'
    xml:
      name: 'Caller'
  
  ElementType:
    type: 'object'
    xml:
      name: 'ElementType'
      

    
  EventType:
    type: 'object'
    required:
      - 'customCode'
      - 'name'
      - 'startDate'
      - 'finishDate'
    properties:
      code:
        type: 'integer'
        format: 'int64'
        example: 1
      customCode:
        type: 'string'
        example: '1'
      name:
        type: 'string'
        example: 'VM OPEN'
      description:
        type: 'string'
        example: 'VM OPEN'
      startDate:
        type: 'string'
        format: 'date-time'
      finishDate:
        type: 'string'
        format: 'date-time'
      template:
        type: 'string'
        example: ''
      callerTypeCode:
        type: 'integer'
        format: 'int64'
        example: 3
      elementTypeCode:
        type: 'integer'
        format: 'int64'
      _links:
        type: 'object'
        required:
          - 'self'
          - 'callerType'
          - 'elementType'
        properties:
          self:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/eventTypes/1'
          callerType:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/eventTypes/1/callerType'
          elementType:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/eventTypes/1/elementType'
    xml:
      name: 'EventType'
      
  Event:
    type: 'object'
    required:
      - 'eventTypeCode'
      - '_links'
    properties:
      code:
        type: 'integer'
        format: 'int64'
      eventTypeCode:
        type: 'integer'
        format: 'int64'
      callerCode:
        type: 'integer'
        format: 'int64'
      elementCode:
        type: 'integer'
        format: 'int64'
      verifyCode:
        type: 'string'
        example: ''
      _links:
        type: 'object'
        required:
          - 'self'
          - 'eventType'
          - 'caller'
          - 'element'
          - 'previousEvent'
          - 'nextEvent'
          - 'previousEvents'
          - 'nextEvents'
        properties:
          self:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1'
          eventType:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/eventType'
          caller:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/caller'
          element:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/element'
          previousEvent:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/previousEvent'
          nextEvent:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/nextEvent'
          previousEvents:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/previousEvents'
          nextEvents:
            type: 'object'
            required:
              - 'href'
            properties:
              href:
                type: 'string'
                example: 'https://localhost/vvsg/api/v1/events/1/nextEvents'
    xml:
      name: 'Event'