#!/bin/bash

PARENT_PROCESS=$(ps -o comm= $PPID) 
EXECUTION_PATH=$(cd `dirname $0` && pwd)

OPTS=`getopt -o h,st: --long help,script-type: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

#GENERIC_COMMANDS_START
GENERIC_COMMANDS=(                                     \
  "pull       [CONTAINER_NAME|...]"                    \
  "up         [CONTAINER_NAME|...]"                    \
  "start      [CONTAINER_NAME|...]"                    \
  "restart    [CONTAINER_NAME|...]"                    \
  "stop       [CONTAINER_NAME|...]"                    \
  "rm         [CONTAINER_NAME|...]"                    \
  "clean      [CONTAINER_NAME|...]"                    \
  "execAsRoot CONTAINER_NAME COMMAND [ARGS]"           \
  "exec       CONTAINER_NAME COMMAND [ARGS]"           \
  "logs       [CONTAINER_NAME|...]"                    \
  "ps         [CONTAINER_NAME]"                        \
  "set        CONTAINER_NAME FILE CONTAINER_DIRECTORY" \
  "get        CONTAINER_NAME CONTAINER_FILE DIRECTORY" \
)
#GENERIC_COMMANDS_END

#SPECIFIC_COMMANDS_START
SPECIFIC_COMMANDS=(                     \
  "pull"                                \
  "up"                                  \
  "start"                               \
  "restart"                             \
  "stop"                                \
  "rm"                                  \
  "clean"                               \
  "execAsRoot COMMAND [ARGS]"           \
  "exec       COMMAND [ARGS]"           \
  "logs"                                \
  "ps"                                  \
  "set        FILE CONTAINER_DIRECTORY" \
  "get        CONTAINER_FILE DIRECTORY" \
)
#SPECIFIC_COMMANDS_ENDS

function genericUsage() {
   printf '%s\n\t' "Usage: $0 " "${GENERIC_COMMANDS[@]}"
}

function specificUsage() {
   printf '%s\n\t' "Usage: $0 " "${SPECIFIC_COMMANDS[@]}"
}

SCRIPT_TYPE=""

while true
  do
    case "$1" in
      -h | --help) 
        if [[ $PARENT_PROCESS =~ ((^(bash|fish)$)) ]]; then
          genericUsage
        fi
        exit 0 ;;
      -st | --script-type)
        SCRIPT_TYPE=$2; shift 2 ;;
      --)
        shift; break ;;
      *)
        shift; break ;; # TODO: Validate cases for exec when a user calls a command using flags
    esac
  done

DOCKER_CMD=$1
DOCKER_CONTAINER=($@)
DOCKER_CONTAINER=(${DOCKER_CONTAINER[@]:1})

case $DOCKER_CMD in
  pull)
    $EXECUTION_PATH/docker-utils pull ${DOCKER_CONTAINER[@]}
    ;;
  up)
    $EXECUTION_PATH/docker-utils up ${DOCKER_CONTAINER[@]}
    ;;
  start)
    $EXECUTION_PATH/docker-utils start ${DOCKER_CONTAINER[@]}
    ;;
  restart)
    $EXECUTION_PATH/docker-utils restart ${DOCKER_CONTAINER[@]}
    ;;
  stop)
    $EXECUTION_PATH/docker-utils stop ${DOCKER_CONTAINER[@]}
    ;;
  rm)
    $EXECUTION_PATH/docker-utils rm ${DOCKER_CONTAINER[@]}
    ;;
  clean)
    $EXECUTION_PATH/docker-utils clean ${DOCKER_CONTAINER[@]}
    ;;
  execAsRoot)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    CONTAINER_CMD=$3
    ARGUMENTS=($@)
    ARGUMENTS=(${ARGUMENTS[@]:3})
    
    if [ ! -z "$ARGUMENTS" ]; then
      $EXECUTION_PATH/docker-utils exec --user root $DOCKER_CONTAINER $CONTAINER_CMD ${ARGUMENTS[@]}
    else
      $EXECUTION_PATH/docker-utils exec --user root $DOCKER_CONTAINER $CONTAINER_CMD
    fi
    ;;
  exec)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    CONTAINER_CMD=$3
    ARGUMENTS=($@)
    ARGUMENTS=(${ARGUMENTS[@]:3})
    
    if [ ! -z "$ARGUMENTS" ]; then
      $EXECUTION_PATH/docker-utils exec $DOCKER_CONTAINER $CONTAINER_CMD ${ARGUMENTS[@]}
    else
      $EXECUTION_PATH/docker-utils exec $DOCKER_CONTAINER $CONTAINER_CMD
    fi
    ;;
  logs)
    $EXECUTION_PATH/docker-utils logs ${DOCKER_CONTAINER[@]}
    ;;
  ps)
    $EXECUTION_PATH/docker-utils ps ${DOCKER_CONTAINER[@]}
    ;;
  set)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    FILE=$3
    CONTAINER_DIRECTORY=$4

    $EXECUTION_PATH/docker-utils set $DOCKER_CONTAINER $FILE $CONTAINER_DIRECTORY
    ;;
  get)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    CONTAINER_FILE=$3
    DIRECTORY=$4
    
    $EXECUTION_PATH/docker-utils get $DOCKER_CONTAINER $CONTAINER_FILE $DIRECTORY
    ;;
  *)
    if [[ $PARENT_PROCESS =~ ((^(bash|fish)$)) ]]; then
      genericUsage
    elif [[ $SCRIPT_TYPE =~ (generic|specific) ]]; then
      PARENT_PROCESS=($(ps -o args= $PPID | cut -d' ' -f2))
      $PARENT_PROCESS -h
    fi
    exit 1
esac
