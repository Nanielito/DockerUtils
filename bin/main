#!/bin/bash

PARENT_PROCESS=$(ps -o comm= $PPID) 
EXECUTION_PATH=$(cd `dirname $0` && pwd)

OPTS=`getopt -o h,c: --long help,caller: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

COMMANDS=(                      \
  "pull"                        \
  "up"                          \
  "start"                       \
  "stop"                        \
  "rm"                          \
  "clean"                       \
  "exec COMMAND [ARGS]"         \
  "logs"                        \
  "ps"                          \
  "cp FILE CONTAINER_DIRECTORY" \
)

function usage() {
   printf '%s\n\t' "Usage: $0 " "${COMMANDS[@]}"
}

SCRIPT_CALLER=""

while true
  do
    case "$1" in
      -h | --help) 
        if [[ $PARENT_PROCESS =~ ((^(bash|fish)$)) ]] || [[ $@ =~ (--caller generic) ]]; then
          $EXECUTION_PATH/docker-utils usage
        else
          usage
        fi
        exit 0 ;;
      -c | --caller)
        SCRIPT_CALLER=$2; shift 2 ;;
      --)
        shift; break ;;
      *)
        shift; break ;;
    esac
  done

DOCKER_CMD=$1
DOCKER_CONTAINER=($@)
DOCKER_CONTAINER=(${DOCKER_CONTAINER[@]:1})

case $DOCKER_CMD in
  pull)
    $EXECUTION_PATH/docker-utils pull ${DOCKER_CONTAINER[@]}
    ;;
  up)
    $EXECUTION_PATH/docker-utils up ${DOCKER_CONTAINER[@]}
    ;;
  start)
    $EXECUTION_PATH/docker-utils start ${DOCKER_CONTAINER[@]}
    ;;
  stop)
    $EXECUTION_PATH/docker-utils stop ${DOCKER_CONTAINER[@]}
    ;;
  rm)
    $EXECUTION_PATH/docker-utils rm ${DOCKER_CONTAINER[@]}
    ;;
  clean)
    $EXECUTION_PATH/docker-utils clean ${DOCKER_CONTAINER[@]}
    ;;
  exec)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    CONTAINER_CMD=$3
    ARGUMENTS=($@)
    ARGUMENTS=(${ARGUMENTS[@]:3})
    
    if [ ! -z "$ARGUMENTS" ]; then
      $EXECUTION_PATH/docker-utils exec $DOCKER_CONTAINER $CONTAINER_CMD ${ARGUMENTS[@]}
    else
      $EXECUTION_PATH/docker-utils exec $DOCKER_CONTAINER $CONTAINER_CMD
    fi
    ;;
  logs)
    $EXECUTION_PATH/docker-utils logs ${DOCKER_CONTAINER[@]}
    ;;
  ps)
    $EXECUTION_PATH/docker-utils ps ${DOCKER_CONTAINER[@]}
    ;;
  cp)
    DOCKER_CONTAINER=${DOCKER_CONTAINER[0]}
    FILE=$3
    CONTAINER_DIRECTORY=$4
    
    $EXECUTION_PATH/docker-utils cp $DOCKER_CONTAINER $FILE $CONTAINER_DIRECTORY
    ;;
  *)
    if [[ $PARENT_PROCESS =~ ((^(bash|fish)$)) ]] || [ "$SCRIPT_CALLER" = "generic" ]; then
      $EXECUTION_PATH/docker-utils usage
    else
      usage
    fi
    exit 1
esac
